-- migration: 20250414065828_create_flashcards_table.sql
-- description: Creates the flashcards table
-- author: db-migration-tool

-- enable pgcrypto for uuid generation
create extension if not exists "pgcrypto";

-- table: flashcards
create table "public"."flashcards" (
  "id" bigint generated by default as identity primary key,
  "front" varchar not null,
  "back" varchar not null,
  "source" varchar not null,
  "created_at" timestamptz not null default now(),
  "updated_at" timestamptz not null default now(),
  "generation_id" bigint,
  "user_id" uuid not null references auth.users(id) on delete cascade
);

-- add foreign key constraint for flashcards to generations
alter table "public"."flashcards" 
  add constraint "flashcards_generation_id_fkey" 
  foreign key ("generation_id") 
  references "public"."generations"("id") 
  on delete set null;

-- indexes for flashcards
create index if not exists "flashcards_user_id_idx" on "public"."flashcards" ("user_id");
create index if not exists "flashcards_created_at_idx" on "public"."flashcards" ("created_at");
create index if not exists "flashcards_generation_id_idx" on "public"."flashcards" ("generation_id");

-- create trigger function for updating the updated_at column
create or replace function "public"."handle_updated_at"() 
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- create trigger for updating the updated_at column on flashcards
create trigger "set_flashcards_updated_at"
before update on "public"."flashcards"
for each row
execute function "public"."handle_updated_at"();

-- enable row level security
alter table "public"."flashcards" enable row level security;

-- flashcards policies for authenticated users
create policy "users can view their own flashcards"
on "public"."flashcards"
for select
to authenticated
using (auth.uid() = user_id);

create policy "users can insert their own flashcards"
on "public"."flashcards"
for insert
to authenticated
with check (auth.uid() = user_id);

create policy "users can update their own flashcards"
on "public"."flashcards"
for update
to authenticated
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

create policy "users can delete their own flashcards"
on "public"."flashcards"
for delete
to authenticated
using (auth.uid() = user_id); 